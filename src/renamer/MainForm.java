/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package renamer;

import java.io.File;
        /**
 *
 * @author Matt
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textDirectory = new javax.swing.JTextField();
        textCurrentFile = new javax.swing.JTextField();
        buttonLoadDirectory = new javax.swing.JButton();
        directoryList = new java.awt.List();
        textShow = new javax.swing.JTextField();
        textSeason = new javax.swing.JTextField();
        textEpisode = new javax.swing.JTextField();
        textEpisodeName = new javax.swing.JTextField();
        buttonRename = new javax.swing.JButton();
        buttonTest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textDirectory.setText("Path");

        textCurrentFile.setText("Current File");

        buttonLoadDirectory.setText("Load Directory");
        buttonLoadDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadDirectoryActionPerformed(evt);
            }
        });

        directoryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                directoryListMouseClicked(evt);
            }
        });
        directoryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryListActionPerformed(evt);
            }
        });

        textShow.setText("Show Name");

        textSeason.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textSeason.setText("Season");

        textEpisode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textEpisode.setText("Episode #");

        textEpisodeName.setText("Episode Name");

        buttonRename.setText("Rename Current Episode");
        buttonRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRenameActionPerformed(evt);
            }
        });

        buttonTest.setText("Load Test Directory");
        buttonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textCurrentFile, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonRename)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textShow, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(textSeason, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(textEpisode, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(textEpisodeName, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonTest)
                        .addGap(18, 18, 18)
                        .addComponent(buttonLoadDirectory))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(directoryList, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonTest)
                    .addComponent(buttonLoadDirectory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directoryList, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textCurrentFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSeason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textEpisode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textEpisodeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(buttonRename)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLoadDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadDirectoryActionPerformed
        String files;
        path = textDirectory.getText();
        try{
            
        
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {

            if (listOfFiles[i].isFile()) {
                files = listOfFiles[i].getName();
                directoryList.add(files);
            }
        }
        } catch (Exception e) {
            System.out.println("Directory Path Was Not Recognized, Try Again.");
        }
    }//GEN-LAST:event_buttonLoadDirectoryActionPerformed

    private void directoryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryListActionPerformed
        currentFile = directoryList.getSelectedItem();
        fillInfo();
        textCurrentFile.setText(currentFile);

        
    }//GEN-LAST:event_directoryListActionPerformed

    private void directoryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_directoryListMouseClicked
        currentFile = directoryList.getSelectedItem();
        
        fillInfo();
        textCurrentFile.setText(currentFile);
        
    }//GEN-LAST:event_directoryListMouseClicked

    private void fillInfo(){
        textCurrentFile.setText(currentFile);
        String[] sAfter = currentFile.split("\\.");
        
        String[] bSeason = sAfter[1].split("S");
        String[] bEpisode = bSeason[1].split("E");
        showName = sAfter[0];
        showName = findName(sAfter[1]);
        textShow.setText(showName);
        try
        {
            String[] cZero = bEpisode[0].split("0");
            textSeason.setText(cZero[1]);
        } catch (Exception e){
            
        }
        //textSeason.setText(bEpisode[0]);
        textEpisode.setText(bEpisode[1]);
        textEpisodeName.setText(sAfter[2]);
        
    }
    
    private String findName(String passed){
        String[] temp;
        
        
        
        return "";
    }
    
    private String findFileExtension(){
        String file;
        int mid = currentFile.lastIndexOf(".");
        file = currentFile.substring(mid + 1, currentFile.length());      
        //System.out.println(file);
        return file;
    }
    
    private String makeNewName(){
        String newName = "New Name";
        try{
            
        String fileExtension = findFileExtension();
        
        int episode = Integer.parseInt(textEpisode.getText());
        int season = Integer.parseInt(textSeason.getText());
        if (season < 0){
            System.out.println("Name Failed To Generate: Season Lower Than Zero.");
        } else if (episode < 0){
            System.out.println("Name Failed To Generate: Episode Lower Than Zero.");
        } else if (season < 10 && episode < 10){
            newName = textShow.getText() + " - S0" + textSeason.getText() + "E0" + textEpisode.getText() + " - " + textEpisodeName.getText() + "." + fileExtension;
        } else if (season < 10 && episode >= 10){
            newName = textShow.getText() + " - S0" + textSeason.getText() + "E" + textEpisode.getText() + " - " + textEpisodeName.getText() + "." + fileExtension;
        } else if (season >= 10 && episode < 10){
            newName = textShow.getText() + " - S" + textSeason.getText() + "E0" + textEpisode.getText() + " - " + textEpisodeName.getText() + "." + fileExtension;
        } else if (season >= 10 && episode >= 10){
            newName = textShow.getText() + " - S" + textSeason.getText() + "E" + textEpisode.getText() + " - " + textEpisodeName.getText() + "." + fileExtension;
        }
        
        } catch (Exception e){
            System.out.println("Error");
        }
        return newName;
    }
    
    private void buttonRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRenameActionPerformed
        String newName = makeNewName();
        System.out.println(newName);
        boolean successRN;
        try{
            File oldName = new File(path + "//" + currentFile);
            File formattedName = new File(path + "//" + newName);
            if (oldName.exists()) System.out.println("Exists");
            successRN = oldName.renameTo(formattedName);
            if (successRN){
                System.out.println("Yes!");
            } else {
                System.out.println("No!");
            }
            
            
                
                
        
        String files;
        directoryList.removeAll();
            
        
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {

            if (listOfFiles[i].isFile()) {
                files = listOfFiles[i].getName();
                directoryList.add(files);
            }
        }
        } catch (Exception e) {
            System.out.println("Directory Path Was Not Recognized, Try Again.");
        }
    }//GEN-LAST:event_buttonRenameActionPerformed

    private void buttonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTestActionPerformed
        textDirectory.setText("C://Users//Matt//Desktop//Test");
        String files;
        path = textDirectory.getText();
        try{
            
        
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {

            if (listOfFiles[i].isFile()) {
                files = listOfFiles[i].getName();
                directoryList.add(files);
            }
        }
        } catch (Exception e) {
            System.out.println("Directory Path Was Not Recognized, Try Again.");
        }
    }//GEN-LAST:event_buttonTestActionPerformed

    
    
    private static String path = "Path";
    private static String currentFile = "Current File";
    private static String showName = "";
    
    public static void setPath(String newPath){
        path = newPath;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLoadDirectory;
    private javax.swing.JButton buttonRename;
    private javax.swing.JButton buttonTest;
    private java.awt.List directoryList;
    private javax.swing.JTextField textCurrentFile;
    private javax.swing.JTextField textDirectory;
    private javax.swing.JTextField textEpisode;
    private javax.swing.JTextField textEpisodeName;
    private javax.swing.JTextField textSeason;
    private javax.swing.JTextField textShow;
    // End of variables declaration//GEN-END:variables
}
